package off.kys.instella.shared_env

import java.nio.file.Path
import java.nio.file.Paths

/**
 * Provides utility methods to retrieve common application-specific directories.
 * This object centralizes path generation for configuration, cache, data, and logs, based on
 * the application name and the user's home directory.
 *
 * Functions:
 * - `configDir()`: Returns the path to the application's configuration directory.
 * - `cacheDir()`: Returns the path to the application's cache directory.
 * - `dataDir()`: Returns the path to the application's data storage directory.
 * - `logDir()`: Returns the path to the application's log directory.
 *
 * The base path is resolved relative to the user's home directory.
 */
object AppDirectories {
    private const val appName = "InStella"

    /**
     * Returns the path to the application's configuration directory.
     *
     * The configuration directory path is derived based on the user's home directory and the
     * application's name. It resides under the ".config" directory and provides a centralized
     * location for storing configuration files related to the application.
     *
     * @return The path to the ".config" directory specific to the application.
     */
    fun configDir(): Path = Paths.get(EnvPaths.homeDir().toString(), ".config", appName)

    /**
     * Returns the path to the application's cache directory.
     *
     * The cache directory is located under the ".cache" folder in the user's home directory
     * and is specific to the application. It is used for storing temporary or non-essential
     * data that can be recreated if necessary.
     *
     * @return The path to the application's cache directory.
     */
    fun cacheDir(): Path = Paths.get(EnvPaths.homeDir().toString(), ".cache", appName)

    /**
     * Returns the path to the application's data storage directory.
     *
     * The data directory path is derived based on the user's home directory and the application's name.
     * It resides under the ".local/share" directory, providing a centralized location for storing
     * persistent application data.
     *
     * @return The path to the ".local/share" directory specific to the application.
     */
    fun dataDir(): Path = Paths.get(EnvPaths.homeDir().toString(), ".local", "share", appName)

    /**
     * Returns the path to the application's log directory.
     *
     * The log directory resides under the ".local/state" directory in the user's home directory
     * and is specific to the application. This directory provides a centralized location for
     * storing log files generated by the application.
     *
     * @return The path to the application's log directory.
     */
    fun logDir(): Path = Paths.get(EnvPaths.homeDir().toString(), ".local", "state", appName, "logs")
}